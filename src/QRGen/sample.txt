import { useState, useEffect } from "react";
import QRTicket from "../Assets/PHILRICE_QR_CONFIRMATION.png";
import { getDatabase, ref, get } from "firebase/database";
import { initializeApp } from "firebase/app";
import html2canvas from "html2canvas";
import Confetti from "react-confetti";

const firebaseConfig = {
  apiKey: "AIzaSyC1id1bulVq3lLUJhkzaNBKH363gp4WqEc",
  authDomain: "philricescannerapp.firebaseapp.com",
  databaseURL: "https://philricescannerapp-default-rtdb.firebaseio.com",
  projectId: "philricescannerapp",
  storageBucket: "philricescannerapp.firebasestorage.app",
  messagingSenderId: "57763195941",
  appId: "1:57763195941:web:e1c8e98a6905b53fc2e3cc",
  measurementId: "G-1S23JZ7X56",
};

const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

export default function QrGen() {
  const [email, setEmail] = useState("");
  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const [numberOfPieces, setNumberOfPieces] = useState(
    window.innerWidth < 768 ? 150 : 1550
  );
  const [firstname, setFirstName] = useState<string>("");
  const [lastname, setLastName] = useState<string>("");
  const [affiliationname, setAffiliationName] = useState<string>("");
  const [unitname, setUnitName] = useState<string>("");

  useEffect(() => {
    const handleResize = () => {
      setNumberOfPieces(window.innerWidth < 768 ? 480 : 550);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const generateQRCode = async () => {
    if (!email) {
      setError("Please enter your email.");
      return;
    }

    setLoading(true);
    const usersRef = ref(database, "users");

    try {
      const snapshot = await get(usersRef);
      if (snapshot.exists()) {
        let userFound = false;
        let userFirstName = "";
        let userLastName = "";
        let userAffiliation = "";
        let userUnit = "";

        snapshot.forEach((childSnapshot) => {
          const user = childSnapshot.val();
          if (user.email === email) {
            userFound = true;
            userFirstName = user.firstNameColumn;
            userLastName = user.lastNameColumn;
            userAffiliation = user.affiliationName || user.philriceName;
            userUnit = user.philriceUnit;
          }
        });

        if (userFound) {
          setFirstName(userFirstName);
          setLastName(userLastName);
          setAffiliationName(userAffiliation);
          setUnitName(userUnit);
          setError(null);
          setShowConfetti(true);
          setQrCodeUrl(
            `https://api.qrserver.com/v1/create-qr-code/?data=${email}&size=200x200`
          );
        } else {
          setError("This email is not registered. Please check and try again.");
        }
      } else {
        setError("No users found in the database.");
      }
    } catch (error) {
      setError("Error checking email in the database.");
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col lg:flex-row justify-center items-center px-4 w-screen h-full my-20 p-4 gap-4 overflow-hidden">
      <div className="w-full lg:w-[734px] h-auto lg:h-[744px] border-[1px] border-solid border-gray-100 rounded-2xl px-8 py-16 flex flex-col justify-center items-center shadow-lg drop-shadow-md backdrop-blur-lg">
        <div className="text-[#0E9046] text-center text-[40px] md:text-[50px] lg:text-[60px] font-bold">
          Get Event-Ready with <br />
          Your<span className="text-[#F3B71C]"> QR Code</span>
        </div>
        <div className="text-[22px] text-center my-4">
          Confirm registration and save your QR Code for <br />
          easy check-in at the event!
        </div>
        <div className="w-8/12 h-[1px] bg-[#0E9046] my-4" />
        <div className="flex flex-col lg:flex-row items-center gap-4 mt-8">
          <div className="flex flex-col gap-4 w-[250px] md:w-[450px]">
            <input
              type="email"
              placeholder="Enter your Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="border border-gray-300 rounded p-2 h-14"
            />
            <button
              onClick={generateQRCode}
              disabled={loading}
              className={`${
                loading ? "bg-gray-400" : "bg-[#F3BD1C]"
              } text-white text-[18px] font-bold py-4 px-6 lg:px-12 rounded-md`}>
              {loading ? "Generating..." : "Generate"}
            </button>
          </div>
          {loading && <div className="loader"></div>}
        </div>
      </div>
    </div>
  );
}
